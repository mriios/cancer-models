"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[649],{4895:function(e,t,s){s.r(t),s.d(t,{default:function(){return HierarchyTree_HierarchyTree}});var r=s(5893),a=s(7893),n=s.n(a),i=s(7294),o=s(6851),d=s(9819),l=s(866);s(3547);let c={x:0,y:0,position:{x:0,y:0},type:"custom",width:230,height:45},h={markerEnd:{type:o.QZ.ArrowClosed,width:17,height:17,color:"#003e48"},labelBgPadding:[5,5]};var utils_parseKnowledgeGraph=(e,t,s)=>({nodes:e.nodes.map(e=>{var r,a;return{id:e.id.toString(),data:{label:e.nodeLabel,provider:t,type:(null===(r=e.data)||void 0===r?void 0:r.type)||""},className:"".concat(e.nodeLabel===s&&(null===(a=e.data)||void 0===a?void 0:a.type)?"current":""," ").concat(e.nodeType?"nodeType-".concat(e.nodeType):""),...c}}),edges:e.edges.map(e=>({id:"e".concat(e.source,"-").concat(e.target),source:e.source.toString(),target:e.target.toString(),label:e.label.replace("_"," "),...h}))}),p=s(7553);let NodeContent=e=>{let{label:t,type:s,provider:a}=e,n="px-2 py-1 d-flex align-center",i=(0,r.jsxs)(r.Fragment,{children:[t,s&&"other"!==s&&(0,r.jsx)("span",{className:"d-flex ml-1",children:(0,r.jsx)(p.Z,{modelType:s,size:"1em"})})]});return s?(0,r.jsx)("a",{className:n,href:"/data/models/".concat(a,"/").concat(t),style:{lineHeight:"2rem"},children:i}):(0,r.jsx)("span",{className:n,children:i})};var u=(0,i.memo)(e=>{let{data:t}=e;return(0,r.jsxs)("div",{children:[(0,r.jsx)(o.HH,{style:{visibility:"hidden"},type:"target",position:o.Ly.Left,isConnectable:!1}),(0,r.jsx)("p",{className:"text-smaller",children:(0,r.jsx)(NodeContent,{...t})}),(0,r.jsx)(o.HH,{style:{visibility:"hidden"},type:"source",position:o.Ly.Right,isConnectable:!1})]})});let y={custom:u};var HierarchyTree_HierarchyTree=e=>{let{data:t,modelId:s,providerId:a}=e,[c,h]=(0,i.useState)(500),{fitView:p}=(0,o._K)(),u=(0,i.useRef)(null),g=(0,i.useMemo)(()=>utils_parseKnowledgeGraph(t,a,s),[t,a,s]);return(0,i.useEffect)(()=>{p()},[p,g.nodes,g.edges]),(0,i.useMemo)(()=>{let e=new(n()).graphlib.Graph().setDefaultEdgeLabel(()=>({}));return e.setGraph({rankdir:"LR"}),g.edges.forEach(t=>e.setEdge(t.source,t.target)),g.nodes.forEach(t=>e.setNode(t.id,t)),n().layout(e),e},[g]),(0,r.jsx)("div",{ref:u,style:{height:c+"px",width:"100%"},children:(0,r.jsxs)(o.x$,{nodes:g.nodes.map(e=>({...e,position:{x:e.x-e.width/2,y:e.y-e.height/2}})),edges:g.edges,proOptions:{hideAttribution:!0},nodeTypes:y,children:[(0,r.jsx)(d.A,{color:"#ebebeb",variant:d.T.Lines}),(0,r.jsx)(l.a,{})]})})}}}]);